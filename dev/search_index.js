var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LevelSets","category":"page"},{"location":"#LevelSets","page":"Home","title":"LevelSets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LevelSets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LevelSets]","category":"page"},{"location":"#LevelSets.LevelSets","page":"Home","title":"LevelSets.LevelSets","text":"Implements smooth-max inspired level-set functions.\n\n\n\n\n\n","category":"module"},{"location":"#LevelSets.LevelSet","page":"Home","title":"LevelSets.LevelSet","text":"Data required by smooth-max level-set function.\n\n\n\n\n\n","category":"type"},{"location":"#LevelSets.boundlevelset-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, LevelSet{T, T1} where T1<:Number}} where T<:Number","page":"Home","title":"LevelSets.boundlevelset","text":"ls, bound = boundlevelset!(x, dx, levset)\n\nReturn level-set value and bound defined by levset, over the element centered at x and with half side lengths dx.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.boundlevelsetgrad!-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, LevelSet{T, T1} where T1<:Number}} where T<:Number","page":"Home","title":"LevelSets.boundlevelsetgrad!","text":"bound = boundlevelsetgrad!(x_bar, x, dx, levset)\n\nReturn bound on level-set gradient x_bar, defined by levset, over the  element centered at x and with half side lengths dx.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.difflevelset!-Union{Tuple{T}, Tuple{Dim}, Tuple{AbstractMatrix{T}, AbstractArray{T, 3}, AbstractMatrix{T}, AbstractVector{T}, AbstractVector{T}, LevelSet{Dim, T}}} where {Dim, T<:Number}","page":"Home","title":"LevelSets.difflevelset!","text":"difflevelset!(xcenter_bar, frame_bar, kappa_bar, rho_bar, x, levset)\n\nCompute the derivatives of the level set, defined by levset, at point x with respect to the LevelSet parameters.\n\nUses the reverse-mode of algorithmic differentiation (i.e. back propagation).\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.difflevelset!-Union{Tuple{T}, Tuple{Dim}, Tuple{AbstractVector{T}, AbstractVector{T}, LevelSet{Dim, T}}} where {Dim, T<:Number}","page":"Home","title":"LevelSets.difflevelset!","text":"difflevelset!(x_bar, x, levset)\n\nCompute the derivatives of the level set, defined by levset, at point x with respect to x.  The derivatives are stored in x_bar.\n\nUses the reverse-mode of algorithmic differentiation (i.e. back propagation).\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.difflocallevelset!-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractMatrix{T}, AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, AbstractMatrix{T}, AbstractVector{T}, T}} where T<:Number","page":"Home","title":"LevelSets.difflocallevelset!","text":"difflocallevelset!(xc_bar, frame_bar, kappa_bar, x, xc, frame, kappa, perp_bar)\n\nComputes the dervatives of locallevelset with respect to xc, frame, and  kappa.  The derivatives are returned in the _bar variables and weighted by  perp_bar.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.difflocallevelset!-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, AbstractMatrix{T}, AbstractVector{T}, T}} where T<:Number","page":"Home","title":"LevelSets.difflocallevelset!","text":"difflocallevelset!(x_bar, x, xc, frame, kappa, perp_bar)\n\nComputes the dervatives of locallevelset with respect to x.  The  derivatives are returned in x_bar and are weighted by perp_bar\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.evallevelset-Union{Tuple{T}, Tuple{Dim}, Tuple{AbstractVector{T}, LevelSet{Dim, T}}} where {Dim, T<:Number}","page":"Home","title":"LevelSets.evallevelset","text":"ls = evallevelset(x, levset)\n\nReturn the level-set value at x defined by levset.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.findclosest!-Union{Tuple{T}, Tuple{Dim}, Tuple{AbstractVector{T}, AbstractVector{T}, LevelSet{Dim, T}}} where {Dim, T<:Number}","page":"Home","title":"LevelSets.findclosest!","text":"findclosest!(x, x0, levset[, tol=1e-12, max_newton=10])\n\nCompute the point x that is on the zero level contour and closest to x0.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.hessianlevelset!-Union{Tuple{T}, Tuple{Dim}, Tuple{AbstractMatrix{T}, AbstractVector{T}, LevelSet{Dim, T}}} where {Dim, T<:Number}","page":"Home","title":"LevelSets.hessianlevelset!","text":"hessianlevelset!(hess, x, levset)\n\nCompute the Hessian of the level set, defined by levset, at point x with respect to x.  The derivatives are stored in hess.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.hesslocallevelset!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T}, AbstractVector{T}, AbstractMatrix{T}, AbstractVector{T}}} where T<:Number","page":"Home","title":"LevelSets.hesslocallevelset!","text":"hesslocallevelset!(hess, x, xc, frame, kappa)\n\nComputes the Hessian of locallevelset with repsect to x.  Note that xc and x are provided but not actually used; quadatic level-set is constant.  We'll keep this interface in case higher-order local level-sets are used in the  future.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.jacobian!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, LevelSet{T, T1} where T1<:Number}} where T<:Number","page":"Home","title":"LevelSets.jacobian!","text":"jacobian!(jac, x, levset)\n\nEvaluate the Jacobian of residual! at x with respect to levset parameters.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.locallevelset-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, AbstractMatrix{T}, AbstractVector{T}}} where T<:Number","page":"Home","title":"LevelSets.locallevelset","text":"ls_local = locallevelset(x, xc, frame, kappa)\n\nReturn a quadratic approximation to the level set based on given xc, frame  coordinate axes, and curvatures kappa.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.parameterindices-Union{Tuple{LevelSet{T, T1} where T1<:Number}, Tuple{T}} where T<:Number","page":"Home","title":"LevelSets.parameterindices","text":"xc_idx, nrm_idx, len_idx = parameterindices(levset)\n\nCreate indices for xcenter, normal, and lenscale parameters in levset.\n\n\n\n\n\n","category":"method"},{"location":"#LevelSets.residual!-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractMatrix{T}, LevelSet{T, T1} where T1<:Number}} where T<:Number","page":"Home","title":"LevelSets.residual!","text":"residual!(res, x, levset)\n\nEvaluate the level-set defined by levset at points x, and store in res\n\n\n\n\n\n","category":"method"}]
}
